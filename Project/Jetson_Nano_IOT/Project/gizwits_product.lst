C51 COMPILER V9.01   GIZWITS_PRODUCT                                                       06/26/2019 15:58:51 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE GIZWITS_PRODUCT
OBJECT MODULE PLACED IN .\gizwits_product.obj
COMPILER INVOKED BY: E:\KEIL14ø™∑¢≥Ã–Ú\C51\BIN\C51.EXE ..\Gizwits\gizwits_product.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDI
                    -R(..\Hal\Hal_Usart;..\Utils;..\Hal;..\User;..\Gizwits;..\Hal\Hal_key;..\SYSTEM;..\Lib\Delay) DEBUG OBJECTEXTEND PRINT(.\
                    -gizwits_product.lst) TABS(2) OBJECT(.\gizwits_product.obj)

line level    source

   1          /**
   2          ************************************************************
   3          * @file         gizwits_product.c
   4          * @brief        Gizwits control protocol processing, and platform-related       hardware initialization 
   5          * @author       Gizwits
   6          * @date         2017-07-19
   7          * @version      V03030000
   8          * @copyright    Gizwits
   9          * 
  10          * @note         Êú∫Êô∫‰∫ë.Âè™‰∏∫Êô∫ËÉΩÁ°¨‰ª∂ËÄåÁîü
  11          *               Gizwits Smart Cloud  for Smart Products
  12          *               ÈìæÊé•|Â¢ûÂÄº÷µ|ÂºÄÊîæ|‰∏≠Á´ã|ÂÆâÂÖ®|Ëá™Êúâ|Ëá™Áî±|ÁîüÊÄÅ
  13          *               www.gizwits.com
  14          *
  15          ***********************************************************/
  16          
  17          #include <stdio.h>
  18          #include <string.h>
  19          #include "Hal_Usart/hal_uart.h"
  20          #include "gizwits_protocol.h"
*** WARNING C318 IN LINE 25 OF ..\GIZWITS\GIZWITS_PROTOCOL.H: can't open file 'stdbool.h'
*** WARNING C318 IN LINE 24 OF ..\UTILS\COMMON.H: can't open file 'stdbool.h'
*** WARNING C245 IN LINE 108 OF ..\UTILS\COMMON.H: unknown #pragma, line ignored
*** WARNING C245 IN LINE 119 OF ..\UTILS\COMMON.H: unknown #pragma, line ignored
*** WARNING C245 IN LINE 297 OF ..\GIZWITS\GIZWITS_PROTOCOL.H: unknown #pragma, line ignored
*** WARNING C322 IN LINE 554 OF ..\GIZWITS\GIZWITS_PROTOCOL.H: unknown identifier
*** WARNING C245 IN LINE 563 OF ..\GIZWITS\GIZWITS_PROTOCOL.H: unknown #pragma, line ignored
  21          #include "gizwits_product.h"
*** WARNING C318 IN LINE 23 OF ..\GIZWITS\GIZWITS_PRODUCT.H: can't open file 'main.h'
  22          #include "common.h"
  23          #include "delay.h"
  24          
  25          /******************** ÂºÄ/ÂÖ≥Êú∫|ÈáçÂêØÂºïËÑö ***************/
  26          #define Power_on P01
  27          #define Power_off P02
  28          #define Reset P03
  29          /******************** ÂºÄ/ÂÖ≥Êú∫|ÈáçÂêØÊ†áÂøóÂ£∞Êòé ***************/
  30          unsigned char flag_on;
  31          unsigned char flag_off;
  32          unsigned char flag_reset;
  33          
  34          extern uint32_t timerMsCount;
  35          
  36          /** User area the current device state structure*/
  37          extern dataPoint_t currentDataPoint;
  38          
  39          /**@} */
  40          /**@name Gizwits User Interface
  41          * @{
  42          */
  43          
  44          /**
  45          * @brief Event handling interface
C51 COMPILER V9.01   GIZWITS_PRODUCT                                                       06/26/2019 15:58:51 PAGE 2   

  46          
  47          * Description:
  48          
  49          * 1. Users can customize the changes in WiFi module status
  50          
  51          * 2. Users can add data points in the function of event processing logic, such as calling the relevant har
             -dware peripherals operating interface
  52          
  53          * @param [in] info: event queue
  54          * @param [in] data: protocol data
  55          * @param [in] len: protocol data length
  56          * @return NULL
  57          * @ref gizwits_protocol.h
  58          */
  59          int8_t gizwitsEventProcess(eventInfo_t *info, uint8_t *gizdata, uint32_t len)
  60          {
  61   1        uint8_t i = 0;
  62   1        dataPoint_t *dataPointPtr = (dataPoint_t *)gizdata;
  63   1        moduleStatusInfo_t *wifiData = (moduleStatusInfo_t *)gizdata;
  64   1        protocolTime_t *ptime = (protocolTime_t *)gizdata;
  65   1        
  66   1      #if MODULE_TYPE
*** WARNING C322 IN LINE 66 OF ..\Gizwits\gizwits_product.c: unknown identifier
                gprsInfo_t *gprsInfoData = (gprsInfo_t *)gizdata;
              #else
  69   1        moduleInfo_t *ptModuleInfo = (moduleInfo_t *)gizdata;
  70   1      #endif
  71   1      
  72   1        if((NULL == info) || (NULL == gizdata))
  73   1        {
  74   2          return -1;
  75   2        }
  76   1      
  77   1        for(i=0; i<info->num; i++)
  78   1        {
  79   2          switch(info->event[i])
  80   2          {
  81   3            case EVENT_Power_on:
  82   3              currentDataPoint.valuePower_on = dataPointPtr->valuePower_on;
  83   3              GIZWITS_LOG("Evt: EVENT_Power_on %d \n", currentDataPoint.valuePower_on);
  84   3              if(0x01 == currentDataPoint.valuePower_on)
  85   3              {
  86   4                Power_on=0;
  87   4                User_Delay_Ms(800);
  88   4                Power_on=1;
  89   4                flag_on=1;
  90   4              }
  91   3              else
  92   3              {
  93   4                //user handle    
  94   4              }
  95   3              break;
  96   3            case EVENT_Power_off:
  97   3              currentDataPoint.valuePower_off = dataPointPtr->valuePower_off;
  98   3              GIZWITS_LOG("Evt: EVENT_Power_off %d \n", currentDataPoint.valuePower_off);
  99   3              if(0x01 == currentDataPoint.valuePower_off)
 100   3              {
 101   4                Power_off=0;
 102   4                User_Delay_Ms(800);
 103   4                Power_off=1;
 104   4                flag_off=1;
 105   4              }
C51 COMPILER V9.01   GIZWITS_PRODUCT                                                       06/26/2019 15:58:51 PAGE 3   

 106   3              else
 107   3              {
 108   4                //user handle    
 109   4              }
 110   3              break;
 111   3            case EVENT_Reset:
 112   3              currentDataPoint.valueReset = dataPointPtr->valueReset;
 113   3              GIZWITS_LOG("Evt: EVENT_Reset %d \n", currentDataPoint.valueReset);
 114   3              if(0x01 == currentDataPoint.valueReset)
 115   3              {
 116   4                Reset=0;
 117   4                User_Delay_Ms(800);
 118   4                Reset=1;
 119   4                flag_reset=1;
 120   4              }
 121   3              else
 122   3              {
 123   4                //user handle    
 124   4              }
 125   3              break;
 126   3      
 127   3      
 128   3      
 129   3      
 130   3            case WIFI_SOFTAP:
 131   3              break;
 132   3            case WIFI_AIRLINK:
 133   3              break;
 134   3            case WIFI_STATION:
 135   3              break;
 136   3            case WIFI_CON_ROUTER:
 137   3       
 138   3              break;
 139   3            case WIFI_DISCON_ROUTER:
 140   3       
 141   3              break;
 142   3            case WIFI_CON_M2M:
 143   3       
 144   3              break;
 145   3            case WIFI_DISCON_M2M:
 146   3              break;
 147   3            case WIFI_RSSI:
 148   3              GIZWITS_LOG("RSSI %d\n", wifiData->rssi);
 149   3              break;
 150   3            case TRANSPARENT_DATA:
 151   3              GIZWITS_LOG("TRANSPARENT_DATA \n");
 152   3              //user handle , Fetch data from [data] , size is [len]
 153   3              break;
 154   3            case WIFI_NTP:
 155   3              GIZWITS_LOG("WIFI_NTP : [%d-%d-%d %02d:%02d:%02d][%d] \n",ptime->year,ptime->month,ptime->day,ptim
             -e->hour,ptime->minute,ptime->second,ptime->ntp);
 156   3              break;
 157   3            case MODULE_INFO:
 158   3                  GIZWITS_LOG("MODULE INFO ...\n");
 159   3            #if MODULE_TYPE
*** WARNING C322 IN LINE 159 OF ..\Gizwits\gizwits_product.c: unknown identifier
                          GIZWITS_LOG("GPRS MODULE ...\n");
                          //Format By gprsInfo_t
                    #else
 163   3                  GIZWITS_LOG("WIF MODULE ...\n");
 164   3                  //Format By moduleInfo_t
 165   3                  GIZWITS_LOG("moduleType : [%d] \n",ptModuleInfo->moduleType);
C51 COMPILER V9.01   GIZWITS_PRODUCT                                                       06/26/2019 15:58:51 PAGE 4   

 166   3            #endif
 167   3          break;
 168   3            default:
 169   3              break;
 170   3          }
 171   2        }
 172   1      
 173   1        return 0;
 174   1      }
*** WARNING C280 IN LINE 59 OF ..\GIZWITS\GIZWITS_PRODUCT.C: 'len': unreferenced local variable
 175          
 176          /**
 177          * User data acquisition
 178          
 179          * Here users need to achieve in addition to data points other than the collection of data collection, can 
             -be self-defined acquisition frequency and design data filtering algorithm
 180          
 181          * @param none
 182          * @return none
 183          */
 184          void userHandle(void)
 185          {
 186   1        if(flag_on==1){Power_on=1;flag_on=0;}else{currentDataPoint.valuePower_on=0;}
 187   1        if(flag_off==1){Power_off=1;flag_off=0;}else{currentDataPoint.valuePower_off=0;}
 188   1        if(flag_reset==1){Reset=1;flag_reset=0;}else{currentDataPoint.valueReset=0;}
 189   1       /*
 190   1          currentDataPoint.valueCPU_DATA = ;//Add Sensor Data Collection
 191   1          currentDataPoint.valueMemory_DATA = ;//Add Sensor Data Collection
 192   1          currentDataPoint.valueCPU2_DATA = ;//Add Sensor Data Collection
 193   1          currentDataPoint.valueCPU3_DATA = ;//Add Sensor Data Collection
 194   1          currentDataPoint.valueCPU4_DATA = ;//Add Sensor Data Collection
 195   1      
 196   1          */
 197   1          
 198   1      }
 199          
 200          /**
 201          * Data point initialization function
 202          
 203          * In the function to complete the initial user-related data
 204          * @param none
 205          * @return none
 206          * @note The developer can add a data point state initialization value within this function
 207          */
 208          void userInit(void)
 209          {
 210   1          memset((uint8_t*)&currentDataPoint, 0, sizeof(dataPoint_t));
 211   1          
 212   1          /** Warning !!! DataPoint Variables Init , Must Within The Data Range **/ 
 213   1          /*
 214   1            currentDataPoint.valuePower_on = ;
 215   1            currentDataPoint.valuePower_off = ;
 216   1            currentDataPoint.valueReset = ;
 217   1            currentDataPoint.valueCPU_DATA = ;
 218   1            currentDataPoint.valueMemory_DATA = ;
 219   1            currentDataPoint.valueCPU2_DATA = ;
 220   1            currentDataPoint.valueCPU3_DATA = ;
 221   1            currentDataPoint.valueCPU4_DATA = ;
 222   1          */
 223   1      
 224   1      }
 225          
C51 COMPILER V9.01   GIZWITS_PRODUCT                                                       06/26/2019 15:58:51 PAGE 5   

 226          
 227          /**
 228          * @brief Millisecond timing maintenance function, milliseconds increment, overflow to zero
 229          
 230          * @param none
 231          * @return none
 232          */
 233          void gizTimerMs(void)
 234          {
 235   1          timerMsCount++;
 236   1      }
 237          
 238          /**
 239          * @brief Read millisecond count
 240          
 241          * @param none
 242          * @return millisecond count
 243          */
 244          uint32_t gizGetTimerCount(void)
 245          {
 246   1          return timerMsCount;
 247   1      }
 248          
 249          /**
 250          * @brief MCU reset function
 251          
 252          * @param none
 253          * @return none
 254          */
 255          void mcuRestart(void)
 256          {
 257   1              IAP_CONTR &= ~0x40; //ËΩØ‰ª∂Â§ç‰ΩçÂêéÁõ¥Êé•ÊâßË°åÁî®Êà∑‰ª£Á†Å
 258   1              IAP_CONTR |= 0x20;  //ËΩØ‰ª∂Â§ç‰Ωç
 259   1      }
 260          
 261          /**@} */
 262          
 263          /**
 264          
 265          /**
 266          * @brief Serial port write operation, send data to WiFi module
 267          *
 268          * @param buf      : buf address
 269          * @param len      : buf length
 270          *
 271          * @return : Return effective data length;-1Ôºåreturn failure
 272          */
 273          int32_t uartWrite(uint8_t *buf, uint32_t len)
 274          {
 275   1          uint32_t i = 0;
 276   1          
 277   1          if(NULL == buf)
 278   1          {
 279   2              return -1;
 280   2          }
 281   1      
 282   1      #ifdef PROTOCOL_DEBUG
                  GIZWITS_LOG("MCU2WiFi[%lu:%lu]: ", gizGetTimerCount(), len);
                  for(i=0; i<len; i++)
                  {
                      GIZWITS_LOG("%02x ", (uint16_t)buf[i]);
              
C51 COMPILER V9.01   GIZWITS_PRODUCT                                                       06/26/2019 15:58:51 PAGE 6   

                      if(i >=2 && buf[i] == 0xFF)
                      {
                          GIZWITS_LOG("%02x ", 0x55);
                      }
                  }
              
                  GIZWITS_LOG("\n");
              #endif
 296   1          
 297   1          for(i=0; i<len; i++)
 298   1          {
 299   2              UART1_TxByte(buf[i]);
 300   2      
 301   2              if(i >=2 && buf[i] == 0xFF)
 302   2              {
 303   3                UART1_TxByte(0x55);
 304   3              }
 305   2          }
 306   1              
 307   1          return len;
 308   1      }
 309          
 310          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    997    ----
   CONSTANT SIZE    =    197    ----
   XDATA SIZE       =      3      34
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  11 WARNING(S),  0 ERROR(S)
