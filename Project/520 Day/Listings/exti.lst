C51 COMPILER V9.01   EXTI                                                                  05/20/2019 10:29:17 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE EXTI
OBJECT MODULE PLACED IN .\Objects\exti.obj
COMPILER INVOKED BY: E:\KEIL14开发程序\C51\BIN\C51.EXE Library\system\EXTI\exti.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(
                    -.\Library\device\digital tube;.\Library\device\HC_SR04;.\Library\device\MP3Player;.\Library\device\Servo;.\Library\devic
                    -e\WS2812B;.\Library\system\ADC;.\Library\system\delay;.\Library\system\EEPROM;.\Library\system\EXTI;.\Library\system\GPI
                    -O;.\Library\system\IIC;.\Library\system\PCA;.\Library\system\PWM;.\Library\system\SYSTEM(Important documents）;.\Library
                    -\system\TIMER;.\Library\system\UART;.\Library\system\WatchDog) DEBUG OBJECTEXTEND PRINT(.\Listings\exti.lst) TABS(2) OBJ
                    -ECT(.\Objects\exti.obj)

line level    source

   1          /**
   2            ******************************************************************************
   3            * @file    exti.c
   4            * @author  PineconePi
   5            * @version V1.0.0
   6            * @date    20-December-2018
   7            * @brief  This file is used for external interrupt configuration
   8            * @License:GNU General Public License v3.0         
   9            ******************************************************************************
  10            * @attention
  11            
  12            *
  13            *  
  14            * 
  15            * 
  16            * 
  17            * 
  18            *
  19            * 
  20            ******************************************************************************
  21            **/
  22          
  23          
  24          #include "exti.h"
  25          
  26          
  27          
  28          /********************* INT0中断函数 *************************/
  29          void Ext_INT0 (void) interrupt EXT_INT0   //进中断时已经清除标志
  30          {
  31   1        //此处添加用户逻辑
  32   1      }
  33          
  34          /********************* INT1中断函数 *************************/
  35          void Ext_INT1 (void) interrupt EXT_INT1   //进中断时已经清除标志
  36          {
  37   1        //此处添加用户逻辑
  38   1      }
  39          
  40          /********************* INT2中断函数 *************************/
  41          void Ext_INT2 (void) interrupt EXT_INT2 //
  42          {
  43   1        //此处添加用户逻辑
  44   1      }
  45          
  46          /********************* INT3中断函数 *************************/
  47          void Ext_INT3 (void) interrupt EXT_INT3
  48          {
  49   1        //此处添加用户逻辑
  50   1      }
C51 COMPILER V9.01   EXTI                                                                  05/20/2019 10:29:17 PAGE 2   

  51          
  52          /********************* INT4中断函数 *************************/
  53          void Ext_INT4 (void) interrupt EXT_INT4
  54          {
  55   1        //此处添加用户逻辑
  56   1      }
  57          
  58          //========================================================================
  59          // 函数: unsigned char Ext_Inilize(unsigned char EXT, EXTI_InitTypeDef *INTx)
  60          // 描述: 外部中断初始化程序.
  61          // 参数: EXT,中断序号（EXT_INT0：外部中断0 , EXT_INT1：外部中断1 , EXT_INT2：外部中断2 , 
  62          //       EXT_INT3：外部中断3 ， EXT_INT4：外部中断4
  63          //       INTx: 结构参数,请参考Exti.h里的定义.
  64          // 返回: 成功返回0, 空操作返回1,错误返回2.
  65          // 版本: VER1.0.0
  66          // 日期: 2018-12-20
  67          // 备注: 通过以下步骤使能INT0
  68          //  EXTI_InitTypeDef EXTI_InitTypeDef;
  69          //  EXTI_InitTypeDef.EXTI_Mode = EXT_MODE_RiseFall;//上升沿中断
  70          //  EXTI_InitTypeDef.EXTI_Polity = PolityHigh;//高优先级
  71          //  EXTI_InitTypeDef.EXTI_Interrupt = ENABLE;//使能
  72          //  Ext_Inilize(EXT_INT0,&EXTI_InitTypeDef);//完成配置
  73          //========================================================================
  74          unsigned char Ext_Inilize(unsigned char EXT, EXTI_InitTypeDef *INTx)
  75          {
  76   1        if(EXT >  EXT_INT4) return 1; //空操作
  77   1        
  78   1        if(EXT == EXT_INT0) //外中断0
  79   1        {
  80   2          if(INTx->EXTI_Interrupt == ENABLE)    EX0 = 1;  //允许中断
  81   2          else                  EX0 = 0;  //禁止中断
  82   2          if(INTx->EXTI_Polity == PolityHigh)   PX0 = 1;  //高优先级中断
  83   2          else                  PX0 = 0;  //低优先级中断
  84   2          if(INTx->EXTI_Mode == EXT_MODE_Fall)  IT0 = 1;  //下降沿中断
  85   2          else                  IT0 = 0;  //上升,下降沿中断
  86   2          return  0;    //成功
  87   2        }
  88   1      
  89   1        if(EXT == EXT_INT1) //外中断1
  90   1        {
  91   2          if(INTx->EXTI_Interrupt == ENABLE)    EX1 = 1;  //允许中断
  92   2          else                  EX1 = 0;  //禁止中断
  93   2          if(INTx->EXTI_Polity == PolityHigh)   PX1 = 1;  //高优先级中断
  94   2          else                  PX1 = 0;  //低优先级中断
  95   2          if(INTx->EXTI_Mode == EXT_MODE_Fall)  IT1 = 1;  //下降沿中断
  96   2          else                  IT1 = 0;  //上升,下降沿中断
  97   2          return  0;    //成功
  98   2        }
  99   1      
 100   1        if(EXT == EXT_INT2)   //外中断2, 固定为下降沿低优先级中断
 101   1        {
 102   2          if(INTx->EXTI_Interrupt == ENABLE)  INTCLKO |=  (1 << 4); //允许中断  
 103   2          else                INTCLKO &= ~(1 << 4); //禁止中断
 104   2          return  0;    //成功
 105   2        }
 106   1      
 107   1        if(EXT == EXT_INT3)   //外中断3, 固定为下降沿低优先级中断
 108   1        {
 109   2          if(INTx->EXTI_Interrupt == ENABLE)  INTCLKO |=  (1 << 5); //允许中断  
 110   2          else                INTCLKO &= ~(1 << 5); //禁止中断
 111   2          return  0;    //成功
 112   2        }
C51 COMPILER V9.01   EXTI                                                                  05/20/2019 10:29:17 PAGE 3   

 113   1      
 114   1        if(EXT == EXT_INT4)   //外中断4, 固定为下降沿低优先级中断
 115   1        {
 116   2          if(INTx->EXTI_Interrupt == ENABLE)  INTCLKO |=  (1 << 6); //允许中断  
 117   2          else                INTCLKO &= ~(1 << 6); //禁止中断
 118   2          return  0;    //成功
 119   2        }
 120   1        return 2; //失败
 121   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    187    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
